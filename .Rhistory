# Set the working directory
setwd("/Volumes/KINGSTON/uni/y3s3/applied regression analysis/assignment")
# Import the data from .txt file
data=read.table("UECM2253_Marketing_Data.txt", header=TRUE)
# Get the number of row & column in the data
dim(data)
# Get the variable names and first 6 row of the data
head(data)
# Check if there are any missing values
any(is.na(data))
# Get the data type of all the column in the data
sapply(data,class)
# Get the value of minimum, first quartile, median, mean, third quartile, and maximum of the data
summary(data)
mod1=lm(sales~youtube, data=data)
sum1=summary(mod1)
sum1
plot(x = data$youtube, y = data$sales, xlab = "YOUTUBE", ylab = "SALES",
main = "SALES VS YOUTUBE", xlim = c(0, 400), ylim = c(0, 40), col = "red", pch = 20, cex = 1.0)
abline(mod1)
mod2=lm(sales~youtube+facebook+newspaper, data=data)
sum2=summary(mod2)
sum2
plot(data)
mod3=lm(sales~youtube+facebook+newspaper+
I(youtube*facebook)+I(youtube*newspaper)+I(facebook*newspaper), data=data)
sum3=summary(mod3)
sum3
#anova test for mod2
anv.mod2=anova(mod2)
anv.mod2
ssr.mod2=sum(anv.mod2$"Sum Sq"[1:3])
ssr.mod2
#anova test for mod3
anv.mod3=anova(mod3)
anv.mod3
ssr.mod3=sum(anv.mod3$"Sum Sq"[1:6])
ssr.mod3
#model4
mod4=lm(sales~youtube+facebook+I(youtube*facebook), data=data)
sum4=summary(mod4)
sum4
# ANOVA test for beta3 = beta13 = beta23 = 0
ANVR <- anova(mod4) #Reduced model
ANVF <- anova(mod3) #Full model
ANVR
ANVF
SSER <- ANVR$"Sum Sq"[4]
SSER
SSEF <- ANVF$"Sum Sq"[7]
SSEF
NDF <- sum(ANVF$"Df"[1:6])-sum(ANVR$"Df"[1:3])
DDF <- ANVF$"Df"[7]
FStat = ((SSER-SSEF)/(NDF))/(SSEF/DDF)
FStat
P.Value = 1-pf(FStat,NDF, DDF)
P.Value
qf(0.95,3,164,lower.tail = TRUE, log.p = FALSE)
anova(mod2)$"Sum Sq"[4] #SSE for Model II
anova(mod3)$"Sum Sq"[7] #SSE for Model III
sum(anova(mod2)$"Sum Sq"[1:4]) #SST for Model II
sum(anova(mod3)$"Sum Sq"[1:7]) #SST for Model III
#double check on values
sum2$adj.r.squared #0.8987
sum3$adj.r.squared #0.9677
# Confint() model III with level 0.95
con_int <- confint(mod3, level=0.95)
con_int
# Getting critical value t at alpha/2 = 0.025 at df = 164 qt(1-alpha/2, df)
qt(0.975, 164)
##### Q8 #####
#Get New Data for xh Model I
ND_mod1 <- data.frame(youtube = c(5.36))
#Get Confidence Interval for Model I
CIM_mod1 <- predict(object = mod1, newdata = ND_mod1, se.fit=TRUE, interval = c("confidence"), level = 0.95)
CIM_mod1
#Get Prediction Interval for Model I
PI_mod1 <- predict(object = mod1, newdata = ND_mod1, se.fit=TRUE, interval = c("prediction"), level = 0.95)
PI_mod1
# se(y)
se_PI=(16.47976-8.600305)/1.9741
se_PI
#Get New Data for xh Model II and Model III
ND_mod2 <- data.frame(youtube = c(5.36), facebook = c(42.20), newspaper = c(30.25))
#Get Confidence Interval for Model II
CIM_mod2 <- predict(object = mod2, newdata = ND_mod2, se.fit=TRUE, interval = c("confidence"), level = 0.95)
CIM_mod2
#Get Prediction Interval for Model II
PI_mod2 <- predict(object = mod2, newdata = ND_mod2, se.fit=TRUE, interval = c("prediction"), level = 0.95)
PI_mod2
#se(y)
se_PI2=(11.82818-7.803871)/1.9743
se_PI2
#Get Confidence Interval for Model III
CIM_mod3 <- predict(object = mod3, newdata = ND_mod2, se.fit=TRUE, interval = c("confidence"), level = 0.95)
CIM_mod3
#Get Prediction Interval for Model III
PI_mod3 <- predict(object = mod3, newdata = ND_mod2, se.fit=TRUE, interval = c("prediction"), level = 0.95)
PI_mod3
#se(y)
se_PI3=(9.431877-7.142145)/1.9745
se_PI3
##### Q9 #####
# Model 1
plot(x=data$youtube, y=data$sales, xlab="Youtube", ylab="Sales", main="Sales vs Youtube")
plot(x=data$youtube, y=mod1$residuals ,xlab="Youtube", ylab="Residuals", main="Residuals vs Youtube")
abline(h=0, col="red")
plot(x=mod1$fitted.values,y=mod1$residuals, xlab="Predicted Values", ylab="Residuals", main="Residuals vs Predicted Values")
abline(h=0,col="red")
qq.plot<-qqnorm(mod1$residuals, main="Normal Probability Plot", xlab="Theoretical Quantiles", ylab="Sample Quantiles", plot.it=TRUE, datax=FALSE)
abline(lm(qq.plot$y~qq.plot$x))
# Model 2
avPlots(mod2)
plot(x=data$youtube, y=mod2$residuals ,xlab="Youtube", ylab="Residuals", main="Residuals vs Youtube")
# Model 2
avPlots(mod2)
library("car")
# Model 2
avPlots(mod2)
# Set the working directory
setwd("/Volumes/KINGSTON/uni/y3s3/applied regression analysis/assignment")
# Import the data from .txt file
data=read.table("UECM2253_Marketing_Data.txt", header=TRUE)
# Get the number of row & column in the data
dim(data)
# Get the variable names and first 6 row of the data
head(data)
# Check if there are any missing values
any(is.na(data))
# Get the data type of all the column in the data
sapply(data,class)
# Get the value of minimum, first quartile, median, mean, third quartile, and maximum of the data
summary(data)
mod1=lm(sales~youtube, data=data)
sum1=summary(mod1)
sum1
plot(x = data$youtube, y = data$sales, xlab = "YOUTUBE", ylab = "SALES",
main = "SALES VS YOUTUBE", xlim = c(0, 400), ylim = c(0, 40), col = "red", pch = 20, cex = 1.0)
abline(mod1)
mod2=lm(sales~youtube+facebook+newspaper, data=data)
sum2=summary(mod2)
sum2
plot(data)
mod3=lm(sales~youtube+facebook+newspaper+
I(youtube*facebook)+I(youtube*newspaper)+I(facebook*newspaper), data=data)
sum3=summary(mod3)
sum3
#anova test for mod2
anv.mod2=anova(mod2)
anv.mod2
ssr.mod2=sum(anv.mod2$"Sum Sq"[1:3])
ssr.mod2
#anova test for mod3
anv.mod3=anova(mod3)
anv.mod3
ssr.mod3=sum(anv.mod3$"Sum Sq"[1:6])
ssr.mod3
#model4
mod4=lm(sales~youtube+facebook+I(youtube*facebook), data=data)
sum4=summary(mod4)
sum4
# ANOVA test for beta3 = beta13 = beta23 = 0
ANVR <- anova(mod4) #Reduced model
ANVF <- anova(mod3) #Full model
ANVR
ANVF
SSER <- ANVR$"Sum Sq"[4]
SSER
SSEF <- ANVF$"Sum Sq"[7]
SSEF
NDF <- sum(ANVF$"Df"[1:6])-sum(ANVR$"Df"[1:3])
DDF <- ANVF$"Df"[7]
FStat = ((SSER-SSEF)/(NDF))/(SSEF/DDF)
FStat
P.Value = 1-pf(FStat,NDF, DDF)
P.Value
qf(0.95,3,164,lower.tail = TRUE, log.p = FALSE)
anova(mod2)$"Sum Sq"[4] #SSE for Model II
anova(mod3)$"Sum Sq"[7] #SSE for Model III
sum(anova(mod2)$"Sum Sq"[1:4]) #SST for Model II
sum(anova(mod3)$"Sum Sq"[1:7]) #SST for Model III
#double check on values
sum2$adj.r.squared #0.8987
sum3$adj.r.squared #0.9677
# Confint() model III with level 0.95
con_int <- confint(mod3, level=0.95)
con_int
# Getting critical value t at alpha/2 = 0.025 at df = 164 qt(1-alpha/2, df)
qt(0.975, 164)
##### Q8 #####
#Get New Data for xh Model I
ND_mod1 <- data.frame(youtube = c(5.36))
#Get Confidence Interval for Model I
CIM_mod1 <- predict(object = mod1, newdata = ND_mod1, se.fit=TRUE, interval = c("confidence"), level = 0.95)
CIM_mod1
#Get Prediction Interval for Model I
PI_mod1 <- predict(object = mod1, newdata = ND_mod1, se.fit=TRUE, interval = c("prediction"), level = 0.95)
PI_mod1
# se(y)
se_PI=(16.47976-8.600305)/1.9741
se_PI
#Get New Data for xh Model II and Model III
ND_mod2 <- data.frame(youtube = c(5.36), facebook = c(42.20), newspaper = c(30.25))
#Get Confidence Interval for Model II
CIM_mod2 <- predict(object = mod2, newdata = ND_mod2, se.fit=TRUE, interval = c("confidence"), level = 0.95)
CIM_mod2
#Get Prediction Interval for Model II
PI_mod2 <- predict(object = mod2, newdata = ND_mod2, se.fit=TRUE, interval = c("prediction"), level = 0.95)
PI_mod2
#se(y)
se_PI2=(11.82818-7.803871)/1.9743
se_PI2
#Get Confidence Interval for Model III
CIM_mod3 <- predict(object = mod3, newdata = ND_mod2, se.fit=TRUE, interval = c("confidence"), level = 0.95)
CIM_mod3
#Get Prediction Interval for Model III
PI_mod3 <- predict(object = mod3, newdata = ND_mod2, se.fit=TRUE, interval = c("prediction"), level = 0.95)
PI_mod3
#se(y)
se_PI3=(9.431877-7.142145)/1.9745
se_PI3
##### Q9 #####
# Model 1
plot(x=data$youtube, y=data$sales, xlab="Youtube", ylab="Sales", main="Sales vs Youtube")
plot(x=data$youtube, y=mod1$residuals ,xlab="Youtube", ylab="Residuals", main="Residuals vs Youtube")
abline(h=0, col="red")
plot(x=mod1$fitted.values,y=mod1$residuals, xlab="Predicted Values", ylab="Residuals", main="Residuals vs Predicted Values")
abline(h=0,col="red")
qq.plot<-qqnorm(mod1$residuals, main="Normal Probability Plot", xlab="Theoretical Quantiles", ylab="Sample Quantiles", plot.it=TRUE, datax=FALSE)
abline(lm(qq.plot$y~qq.plot$x))
library("car")
# Model 2
#add variable plot
avPlots(mod2)
plot(x=data$youtube, y=mod2$residuals ,xlab="Youtube", ylab="Residuals", main="Residuals vs Youtube")
abline(h=0, col="red")
plot(x=data$newspaper, y=mod2$residuals ,xlab="Newspaper", ylab="Residuals", main="Residuals vs Newspaper")
abline(h=0, col="red")
plot(x=data$facebook, y=mod2$residuals ,xlab="Facebook", ylab="Residuals", main="Residuals vs Facebook")
abline(h=0, col="red")
plot(x=mod2$fitted.values,y=mod2$residuals, xlab="Predicted Values", ylab="Residuals", main="Residuals vs Predicted Values")
abline(h=0,col="red")
qq.plot<-qqnorm(mod2$residuals, main="Normal Probability Plot", xlab="Theoretical Quantiles", ylab="Sample Quantiles", plot.it=TRUE, datax=FALSE)
abline(lm(qq.plot$y~qq.plot$x))
# Model 3
avPlots(mod3)
plot(x=data$youtube, y=mod3$residuals ,xlab="Youtube", ylab="Residuals", main="Residuals vs Youtube")
abline(h=0, col="red")
plot(x=data$newspaper, y=mod3$residuals ,xlab="Newspaper", ylab="Residuals", main="Residuals vs Newspaper")
abline(h=0, col="red")
plot(x=data$facebook, y=mod3$residuals ,xlab="Facebook", ylab="Residuals", main="Residuals vs Facebook")
abline(h=0, col="red")
plot(x=mod3$fitted.values,y=mod3$residuals, xlab="Predicted Values", ylab="Residuals", main="Residuals vs Predicted Values")
abline(h=0,col="red")
qq.plot<-qqnorm(mod3$residuals, main="Normal Probability Plot", xlab="Theoretical Quantiles", ylab="Sample Quantiles", plot.it=TRUE, datax=FALSE)
abline(lm(qq.plot$y~qq.plot$x))
#####Q10#####
#fitted value
Yhat=round(mod2$fitted.values,3)
#residuals, ei
Ei=round(mod2$residuals,3)
#standardized residuals, di
Di=round((mod2$"residuals"/sum2$"sigma"),3)
#sqrt(MSE)=2.01
#Di which outside the range of +-3
potential_outlier=Di[Di>3|Di<(-3)]
#studentized residuals, ri
Ri=round(rstandard(mod2),3)
#Ri which outside the range of +-3
potential_outlier2=Ri[Ri>3|Ri<(-3)]
#t statistic of ri
t2=qt(1-0.05/length(mod2$fitted.values),df=mod2$df.residual)
t2
#rstudnet, ti
Ti=round((rstudent(mod2)),3)
#ti which outside the range of +-3
potential_outlier2=Ti[Ti>3|Ti<(-3)]
#t statistic of ti
t1=qt(1-0.05/length(mod2$fitted.values),df=mod2$df.residual-1)
t1
#ith element of hat matrix
Hii=round(hatvalues(mod2),3)
#potential high leverage
high_leverage=Hii[Hii>2*(3+1)/171]
#PRESS residuals
PRESS=round(mod2$residuals/(1-hatvalues(mod2)),3)
#influence on single fitted value, DFFITs
DFFITs.i=round(dffits(model=mod2),3)
#possible influential (large data)
high_influential=DFFITs.i[abs(DFFITs.i)>2*((3+1)/171)^0.5]
high_influential
#cook distance, cook.i
Cook.i=round(cooks.distance(model=mod2),3)
#F(0.5;3+1,171-3-1)
F0.5=pf(0.5,3+1,171-3-1)
#F(0.2;3+1,171-3-1)
F0.2=pf(0.2,3+1,171-3-1)
#potential influential
high_influential2=Cook.i[Cook.i>F0.5]
little_influential=Cook.i[Cook.i>F0.2]
#summary of all types of residuals
residual_table=data.frame(cbind(Yhat,Ei,Di,Ri,Ti,PRESS,Hii,DFFITs.i,Cook.i))
residual_table
write.csv(residual_table,file="residual_table.csv")
#####Q11#####
library(MASS)
mod1=lm(sales~youtube,data=data)
#estimate lambda hat using Box Cox method
save.bc=boxcox(object=mod1,lamda=seq(from=-2,to=2,by=0.01))
title(main="Box-Cox transformation plot")
lambda.hat=save.bc$x[save.bc$y==max(save.bc$y)]
lambda.hat
#95% confident interval of lambda
ci=save.bc$x[save.bc$y>max(save.bc$y)-1/2*qchisq(0.95,1)]
max(ci)
min(ci)
#fit model using the transformed Y by estimated lambda
mod.trans=lm(sales^lambda.hat~youtube,data=data)
summary(mod.trans)
#plot scatter plot of transformed y and non-transformed y
par(mfrow=c(1,2))
plot(data$youtube,data$sales,xlab="X1",ylab=expression(hat(Y)),
main=expression(paste(hat(Y), " vs X1")),col="blue",pch=19,
panel.first=grid(col="gray",lty="dotted"))
abline(mod1,col="red")
plot(data$youtube,(data$sales)^lambda.hat,xlab="X1",ylab=expression(hat(Y)^{0.5050}),
main=expression(paste(hat(Y)^{0.5050}, " vs X1")),col="blue",pch=19,
panel.first=grid(col="gray",lty="dotted"))
abline(mod.trans,col="red")
#plot residual plot of transformed y and non-transformed y
plot(mod1$fitted.values,mod1$residuals,xlab=expression(hat(Y)),ylab="Residuals",
main=expression(paste("Residuals vs. ",hat(Y))),col="blue",pch=19,
panel.first=grid(col="gray",lty="dotted"))
abline(h=0)
plot(mod.trans$fitted.values,mod.trans$residuals,xlab=expression(hat(Y)^{0.5050}),ylab="Residuals",
main=expression(paste("Residuals vs. ",hat(Y)^{0.5050})),col="blue",pch=19,
panel.first=grid(col="gray",lty="dotted"))
abline(h=0)
#plot normal probability plot of transformed y and non-transformed y
qqt.plot=qqnorm(mod1$residuals,col="blue",pch=19,cex=1.5,xlab="Theoretical Quantile",
ylab="Sample Quantile",main="Normal Prob. Before Transform")
abline(lm(qqt.plot$y~qqt.plot$x))
qqt.plot.trans=qqnorm(mod.trans$residuals,col="blue",pch=19,cex=1.5,
xlab="Theoretical Quantile",ylab="Sample Quantile",
main="Normal Prob. After Transform")
abline(lm(qqt.plot.trans$y~qqt.plot.trans$x))
summary(mod.trans)
summary(mod1)
setwd("/Volumes/KINGSTON/projects/houseprice_app")
pwd
pwd()
